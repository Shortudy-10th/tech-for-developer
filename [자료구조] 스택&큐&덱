# Java 1일차

<details>

<summary>❓ 큐, 스택, 덱이 각각 어떠한 구조를 가지는지 설명해 주세요.</summary>

### ❓ 큐, 스택, 덱이 각각 어떠한 구조를 가지는지 설명해 주세요.

## 큐

![image](https://github.com/Shortudy-10th/tech-for-developer/assets/70586307/0392701a-8ee5-4f82-9bf1-2e2799959e7e)

* 단방향 자료구조로 FIFO(First In First Out)의 구조를 가지고 있음. 먼저 입력된 것이 먼저 삭제.

## 스택

![image](https://github.com/Shortudy-10th/tech-for-developer/assets/70586307/6f3322e2-4855-4193-9031-bee45a0a09bd)

* 단방향 자료구조로 LIFO(Last In First Out)의 구조를 가지고 있다. 마지막에 입력된 것이 먼저 삭제.

## 덱

![image](https://github.com/Shortudy-10th/tech-for-developer/assets/70586307/5986633c-c9d2-4ccb-88ed-d9c12ee3f543)

* 양방향 자료구조로 스택과 큐의 특징을 모두 가지고 있음. 양쪽 끝에서 삽입과 삭제가 모두 가능.

<details>

<summary>❓ 큐, 스택, 덱이 활용되는 알고리즘은 어떤 것들이 있나요?</summary>

## ❓ 큐, 스택, 덱이 활용되는 알고리즘은 어떤 것들이 있나요?

* 큐 : bfs

* 스택 : dfs

* 덱 : 슬라이딩 윈도우, 팰린드롬 판별

</details>


<details>

<summary>❓ 스택 오버플로우와 스택 언더플로우는 무엇이며, 어떻게 방지할 수 있나요? </summary>

## ❓ 스택 오버플로우와 스택 언더플로우는 무엇이며, 어떻게 방지할 수 있나요?

* 스택 오버플로우는 스택의 용량을 초과하여 데이터를 삽입하려는 경우 발생합니다.
* 스택 언더플로우는 스택이 비어 있는데 데이터를 꺼내려는 경우 발생합니다.'
* 이를 방지하기 위해서는 스택의 크기를 적절히 관리하고, 삽입/삭제 연산 전에 스택의 상태를 확인하는 로직을 추가해야 합니다.


</details>

</details>

<br>
